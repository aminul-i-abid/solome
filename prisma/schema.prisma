generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  firstName String
  lastName  String
  username  String    @unique
  email     String    @unique
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Project   Project[]
  Label     Label[]
  Comment   Comment[]
}

enum ProjectStatus {
  IN_PROGRESS
  COMPLETED
}

model Project {
  id          String        @id @default(cuid())
  userId      String
  user        User          @relation(fields: [userId], references: [id])
  name        String
  description String?
  status      ProjectStatus @default(IN_PROGRESS)
  progression String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Task        Task[]
}

model Label {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  name      String
  color     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Task      Task[]
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  COMPLETED
}

model Task {
  id        String     @id @default(cuid())
  projectId String
  project   Project    @relation(fields: [projectId], references: [id])
  labelId   String?
  label     Label?     @relation(fields: [labelId], references: [id])
  title     String?
  content   String?
  dueDate   DateTime?
  priority  Priority?
  status    TaskStatus @default(TODO)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  SubTask   SubTask[]
  Comment   Comment[]
  TimeLog   TimeLog[]
}

model SubTask {
  id        String   @id @default(cuid())
  taskId    String
  task      Task     @relation(fields: [taskId], references: [id])
  todo      String
  status    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id        String   @id @default(cuid())
  taskId    String
  task      Task     @relation(fields: [taskId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TimeLog {
  id       String    @id @default(cuid())
  taskId   String
  task     Task      @relation(fields: [taskId], references: [id])
  start    DateTime?
  end      DateTime?
  duration String?
}
